{"version":3,"sources":["Citater.js","AddCitate.js","App.js","serviceWorker.js","index.js"],"names":["Citater","deleteCitate","CitateList","map","Citate","className","classtitle","key","id","title","text","author","onClick","AddCitate","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addCitate","onSubmit","this","htmlFor","type","onChange","Component","App","Math","random","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PA+BeA,EA3BC,YAAgC,IAA7BA,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAGlBC,EAAaF,EAAQG,KAAI,SAAAC,GAC3B,OACI,yBAAKC,UAAU,aACX,yBAAKC,WAAW,SAASC,IAAKH,EAAOI,IACjC,yBAAKH,UAAU,qCAAqCD,EAAOK,MAA3D,KACA,yBAAKJ,UAAU,eAAeD,EAAOM,MACrC,yBAAKL,UAAU,eAAeD,EAAOO,QACrC,yBAAKN,UAAU,eACX,4BAAQA,UAAU,uBAAuBO,QAAS,WAAQX,EAAaG,EAAOI,MAA9E,gBAQpB,OACI,yBAAKF,WAAW,eACXJ,I,OCYEW,E,2MAjCXC,MAAQ,CACJL,MAAO,KACPC,KAAM,KACNC,OAAQ,M,EAEZI,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAGhCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,UAAU,EAAKT,Q,wEAG1B,OACI,6BACI,yBAAKT,UAAU,cACX,0BAAMmB,SAAUC,KAAKL,cACjB,2BAAOf,UAAU,wBAAwBqB,QAAQ,UAAjD,UACA,2BAAOrB,UAAU,UAAUsB,KAAK,OAAOnB,GAAG,QAAQoB,SAAUH,KAAKV,eACjE,2BAAOV,UAAU,wBAAwBqB,QAAQ,UAAjD,UACA,2BAAOrB,UAAU,UAAUsB,KAAK,OAAOnB,GAAG,OAAOoB,SAAUH,KAAKV,eAChE,2BAAOV,UAAU,wBAAwBqB,QAAQ,UAAjD,WACA,2BAAOrB,UAAU,UAAUsB,KAAK,OAAOnB,GAAG,SAASoB,SAAUH,KAAKV,eAClE,4BAAQV,UAAU,oCAAlB,oB,GA1BAwB,aCyCTC,E,2MAvCbhB,MAAQ,CACNd,QAAS,CACP,CAAES,MAAO,UAAWC,KAAM,8FAA+FC,OAAQ,kBAAmBH,GAAI,GACxJ,CAAEC,MAAO,gBAAiBC,KAAM,+DAAgEC,OAAQ,eAAgBH,GAAI,GAC5H,CAAEC,MAAO,kBAAmBC,KAAM,kKAA8JC,OAAQ,cAAeH,GAAI,GAC3N,CAAEC,MAAO,QAASC,KAAM,+EAAgFC,OAAQ,qBAAsBH,GAAI,GAC1I,CAAEC,MAAO,mBAAoBC,KAAM,sIAAuIC,OAAQ,iBAAkBH,GAAI,GACxM,CAAEC,MAAO,UAAWC,KAAM,2GAA4GC,OAAQ,iBAAkBH,GAAI,K,EAGxKe,UAAY,SAACnB,GACXA,EAAOI,GAAKuB,KAAKC,SACjB,IAAIhC,EAAO,sBAAO,EAAKc,MAAMd,SAAlB,CAA2BI,IACtC,EAAKa,SAAS,CACZjB,QAASA,K,EAGbC,aAAe,SAACO,GACd,IAAIR,EAAU,EAAKc,MAAMd,QAAQiC,QAAO,SAAA7B,GACtC,OAAOA,EAAOI,KAAOA,KAEvB,EAAKS,SAAS,CACZjB,QAASA,K,wEAIX,OACE,yBAAKM,WAAW,OACd,yBAAKD,UAAU,aACb,wBAAIA,UAAU,eAAd,wCACA,uBAAGA,UAAU,eAAb,4BAEF,kBAAC,EAAD,CAASJ,aAAcwB,KAAKxB,aAAcD,QAASyB,KAAKX,MAAMd,UAC9D,kBAAC,EAAD,CAAWuB,UAAWE,KAAKF,iB,GAlCjBM,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bfdc4094.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Citater = ({ Citater, deleteCitate }) => {\r\n\r\n\r\n    const CitateList = Citater.map(Citate => {\r\n        return (\r\n            <div className=\"container\">\r\n                <div classtitle=\"Citate\" key={Citate.id}>\r\n                    <div className=\"font-weight-bold pt-5 text-center\">{Citate.title} </div>\r\n                    <div className=\"text-center\">{Citate.text}</div>\r\n                    <div className=\"text-center\">{Citate.author}</div>\r\n                    <div className=\"text-center\">\r\n                        <button className=\"btn btn-primary mt-3\" onClick={() => { deleteCitate(Citate.id) }} >Delete</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div classtitle=\"Citate-List\">\r\n            {CitateList}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Citater;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass AddCitate extends Component {\r\n    state = {\r\n        title: null,\r\n        text: null,\r\n        author: null\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addCitate(this.state);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"container \">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label className=\"font-weight-bold pt-5\" htmlFor=\"title \">Title:</label>\r\n                        <input className=\" col-12\" type=\"text\" id=\"title\" onChange={this.handleChange} />\r\n                        <label className=\"font-weight-bold pt-5\" htmlFor=\"title \">Quote:</label>\r\n                        <input className=\" col-12\" type=\"text\" id=\"text\" onChange={this.handleChange} />\r\n                        <label className=\"font-weight-bold pt-5\" htmlFor=\"title \">Author:</label>\r\n                        <input className=\" col-12\" type=\"text\" id=\"author\" onChange={this.handleChange} />\r\n                        <button className=\"col-12 btn btn-primary mb-5 mt-5\">Add Quote</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddCitate;","import React, { Component } from 'react';\nimport Citater from './Citater';\nimport AddCitate from './AddCitate';\n\nclass App extends Component {\n  state = {\n    Citater: [\n      { title: 'Living ', text: '\"The greatest glory in living lies not in never falling, but in rising every time we fall.\"', author: '-Nelson Mandela', id: 1 },\n      { title: 'Communication', text: '\"The way to get started is to quit talking and begin doing.\"', author: '-Walt Disney', id: 2 },\n      { title: 'Live your life ', text: '\"Your time is limited, so dont waste it living someone elses life. Dont be trapped by dogma â€“ which is living with the results of other peoples thinking.\"', author: '-Steve Jobs', id: 3 },\n      { title: 'Life ', text: '\"If life were predictable it would cease to be life, and be without flavor.\"', author: '-Eleanor Roosevelt', id: 4 },\n      { title: 'always want more', text: '\"If you look at what you have in life, youll always have more. If you look at what you dont have in life, youll never have enough.\"', author: '-Oprah Winfrey', id: 5 },\n      { title: 'Success', text: '\"If you set your goals ridiculously high and its a failure, you will fail above everyone elses success.\"', author: '-James Cameron', id: 6 }\n    ]\n  }\n  addCitate = (Citate) => {\n    Citate.id = Math.random();\n    let Citater = [...this.state.Citater, Citate];\n    this.setState({\n      Citater: Citater\n    })\n  }\n  deleteCitate = (id) => {\n    let Citater = this.state.Citater.filter(Citate => {\n      return Citate.id !== id\n    });\n    this.setState({\n      Citater: Citater\n    })\n  }\n  render() {\n    return (\n      <div classtitle=\"App\">\n        <div className=\"jumbotron\">\n          <h1 className=\"text-center\">The 6 Most Famous Quotes of All Time</h1>\n          <p className=\"text-center\">Quotes by Famous People</p>\n        </div>\n        <Citater deleteCitate={this.deleteCitate} Citater={this.state.Citater} />\n        <AddCitate addCitate={this.addCitate} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}